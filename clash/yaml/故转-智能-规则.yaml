# ==========================================================
# Clash-ALL 优化配置 (重构版 by AI Assistant)
#
# 主要改进:
# 1. 使用YAML锚点和模板重构了 proxy-groups，大幅减少冗余。
# 2. 引入 .所有节点 根策略组，替代 include-all，逻辑更清晰。
# 3. 优化了 provider 的健康检查频率，减少性能开销。
# ==========================================================

# 机场节点订阅

proxy-providers:

  小牛云:
    url: "http://192.168.123.121/clash/airport/xiao_niu.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连 
    
  三月七:
    url: "http://192.168.123.121/clash/airport/san_yue_qi.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连    

  三分机场:
    url: "http://192.168.123.121/clash/airport/san_fen.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连    

  快冲云:
    url: "http://192.168.123.121/clash/airport/kuai_chong.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连    


  CloudFlare1:
    url: "http://192.168.123.121/clash/airport/cf1.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连

  CloudFlare2:
    url: "http://192.168.123.121/clash/airport/cf2.txt"
    type: http
    interval: 60
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 60
    proxy: 直连


proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# ========================
# 主要端口设置
# ========================
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7895

allow-lan: true
mode: rule
log-level: error

external-controller: 0.0.0.0:9090
external-ui: ui
external-ui-name: zashboard
external-ui-url: https://gh-proxy.com/github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip
secret: "Dandan19960813.1!"

# ========================
# DNS 设置
# ========================
dns:
  enable: true
  listen: 0.0.0.0:7874
  ipv6: false
  enhanced-mode: fake-ip
  fake-ip-range: 198.20.0.1/16
  nameserver:
    - 192.168.123.253
  fake-ip-filter:
    - +.lan
    - +.local
    - geosite:cn
# 小牛
    - +.4yfu73r3a4kl.com
    - +.xiaoniuyun.cc  

ipv6: false

# ========================
# TUN 模块
# ========================
tun:
  enable: true
  stack: gvisor
  device: utun
  endpoint-independent-nat: true
  auto-route: false
  auto-detect-interface: false
  auto-redirect: false
  strict-route: false

profile:
  store-selected: true
  store-fake-ip: true

# ================================================================
# 策略组定义 (重构核心区域)
# ================================================================

# [重构] 定义三个可复用的策略组模板，用于生成各种地区组
smart_template: &smart_template
  type: smart
  policy-priority: "三月七:1.2;小牛:0.9;三分:0.7;快冲:0.5"
  include-all: true
  tolerance: 10
  interval: 10
  uselightgbm: true
  collectdata: false
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 10
    tolerance: 2
  strategy: sticky-sessions

autotest_template: &autotest_template
  type: url-test
  include-all: true
  tolerance: 10
  interval: 10

manual_template: &manual_template
  type: select
  include-all: true
  tolerance: 10
  interval: 10

fallback_template: &fallback_template
  type: fallback
  interval: 10
  lazy: false

# --- [最终修正] 在这里定义一个完整的、可复用的 default 业务组模板 ---
default: &default
  type: select 
  proxies: 
    - 香港-故转
    - 香港-自手
    - 香港-智选
    - 香港-自动
    - 香港-手动
    - 台湾-故转
    - 台湾-自手
    - 台湾-智选
    - 台湾-自动
    - 台湾-手动
    - 日本-故转
    - 日本-自手
    - 日本-智选
    - 日本-自动
    - 日本-手动
    - 新加坡-故转
    - 新加坡-自手
    - 新加坡-智选
    - 新加坡-自动
    - 新加坡-手动
    - 韩国-故转
    - 韩国-自手
    - 韩国-智选
    - 韩国-自动
    - 韩国-手动
    - 美国-故转
    - 美国-自手
    - 美国-智选
    - 美国-自动
    - 美国-手动
    - 美国家宽-故转
    - 美国家宽-自手
    - 美国家宽-智选
    - 美国家宽-自动
    - 美国家宽-手动
    - 其他-故转
    - 其他-自手
    - 其他-智选
    - 其他-自动
    - 其他-手动
    - TikTok-故转
    - TikTok-自手
    - TikTok-智选
    - TikTok-自动
    - TikTok-手动
    - CloudFlare
    - 默认
    - 直连
    - 拒绝


# ========================
# ---- 策略组列表 ----
# ========================

proxy-groups: 

 # --- 第一层：业务分流组---
  - {name: Twitter, <<: *default}
  - {name: 灵活, <<: *default}
  - {name: 不走代理, <<: *default}
  - {name: 必须日本, <<: *default}
  - {name: 必须香港, <<: *default}
  - {name: Gemini, <<: *default}
  - {name: AI, <<: *default}
  - {name: Nvidia, <<: *default}
  - {name: GitHub, <<: *default}
  - {name: TikTok, <<: *default}
  - {name: Telegram, <<: *default}
  - {name: Social, <<: *default}
  - {name: Apple, <<: *default}
  - {name: Microsoft, <<: *default}
  - {name: Steam, <<: *default}
  - {name: Game, <<: *default}
  - {name: YouTube, <<: *default}
  - {name: Media, <<: *default}
  - {name: 检测, <<: *default}
  - {name: IP, <<: *default}
  - {name: 源IP, <<: *default}
  - {name: 国内, <<: *default}
  - {name: 国外, <<: *default}
  - {name: 其他, <<: *default}

  # --- 第二层：最终的功能策略组 ---

  # 默认
  - name: 默认
    type: select
    tolerance: 10
    interval: 10
    proxies:
      - 香港-故转
      - 香港-自手
      - 香港-智选
      - 香港-自动
      - 香港-手动
      - 台湾-故转
      - 台湾-自手
      - 台湾-智选
      - 台湾-自动
      - 台湾-手动
      - 日本-故转
      - 日本-自手
      - 日本-智选
      - 日本-自动
      - 日本-手动
      - 新加坡-故转
      - 新加坡-自手
      - 新加坡-智选
      - 新加坡-自动
      - 新加坡-手动
      - 韩国-故转
      - 韩国-自手
      - 韩国-智选
      - 韩国-自动
      - 韩国-手动
      - 美国-故转
      - 美国-自手
      - 美国-智选
      - 美国-自动
      - 美国-手动
      - 美国家宽-故转
      - 美国家宽-自手
      - 美国家宽-智选
      - 美国家宽-自动
      - 美国家宽-手动
      - 其他-故转
      - 其他-自手
      - 其他-智选
      - 其他-自动
      - 其他-手动
      - TikTok-故转
      - TikTok-自手
      - TikTok-智选
      - TikTok-自动
      - TikTok-手动
      - CloudFlare
      - 直连
      - 拒绝

  # 香港组
  - name: 香港-故转
    <<: *fallback_template
    proxies:
      - 香港-智选
      - 香港-自手

  - name: 香港-自手
    <<: *fallback_template
    proxies:
      - 香港-自动
      - 香港-手动

  - name: 香港-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*香港"

  - name: 香港-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*香港"

  - name: 香港-手动
    <<: *manual_template
    filter: "(?:香港)"

  # 台湾组
  - name: 台湾-故转
    <<: *fallback_template
    proxies:
      - 台湾-智选
      - 台湾-自手

  - name: 台湾-自手
    <<: *fallback_template
    proxies:
      - 台湾-自动
      - 台湾-手动

  - name: 台湾-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*台湾"

  - name: 台湾-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*台湾"

  - name: 台湾-手动
    <<: *manual_template
    filter: "(?:台湾)"

  # 日本组
  - name: 日本-故转
    <<: *fallback_template
    proxies:
      - 日本-智选
      - 日本-自手

  - name: 日本-自手
    <<: *fallback_template
    proxies:
      - 日本-自动
      - 日本-手动

  - name: 日本-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*日本"

  - name: 日本-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*日本"

  - name: 日本-手动
    <<: *manual_template
    filter: "(?:日本)"

  # 新加坡组
  - name: 新加坡-故转
    <<: *fallback_template
    proxies:
      - 新加坡-智选
      - 新加坡-自手

  - name: 新加坡-自手
    <<: *fallback_template
    proxies:
      - 新加坡-自动
      - 新加坡-手动

  - name: 新加坡-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*新加坡"

  - name: 新加坡-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*新加坡"

  - name: 新加坡-手动
    <<: *manual_template
    filter: "(?:新加坡)"

  # 韩国组
  - name: 韩国-故转
    <<: *fallback_template
    proxies:
      - 韩国-智选
      - 韩国-自手

  - name: 韩国-自手
    <<: *fallback_template
    proxies:
      - 韩国-自动
      - 韩国-手动

  - name: 韩国-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*韩国"

  - name: 韩国-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*韩国"

  - name: 韩国-手动
    <<: *manual_template
    filter: "(?:韩国)"

  # 美国组
  - name: 美国-故转
    <<: *fallback_template
    proxies:
      - 美国-智选
      - 美国-自手

  - name: 美国-自手
    <<: *fallback_template
    proxies:
      - 美国-自动
      - 美国-手动

  - name: 美国-智选
    <<: *smart_template
    filter: "^(?!.*快冲).*美国"

  - name: 美国-自动
    <<: *autotest_template
    filter: "^(?!.*快冲).*美国"

  - name: 美国-手动
    <<: *manual_template
    filter: "(?:美国)"

  # 美国家宽组
  - name: 美国家宽-故转
    <<: *fallback_template
    proxies:
      - 美国家宽-智选
      - 美国家宽-自手

  - name: 美国家宽-自手
    <<: *fallback_template
    proxies:
      - 美国家宽-自动
      - 美国家宽-手动

  - name: 美国家宽-智选
    <<: *smart_template
    filter: "^(?=.*美国)(?=.*(家宽|原生|ISP)).*"

  - name: 美国家宽-自动
    <<: *autotest_template
    filter: "^(?=.*美国)(?=.*(家宽|原生|ISP)).*"

  - name: 美国家宽-手动
    <<: *manual_template
    filter: "^(?=.*美国)(?=.*(家宽|原生|ISP)).*"


  # TikTok组
  - name: TikTok-故转
    <<: *fallback_template
    proxies:
      - TikTok-智选
      - TikTok-自手

  - name: TikTok-自手
    <<: *fallback_template
    proxies:
      - TikTok-自动
      - TikTok-手动

  - name: TikTok-智选
    <<: *smart_template
    filter: "(?=.*日本)(?=.*(原生|家宽)).*"

  - name: TikTok-自动
    <<: *autotest_template
    filter: "(?=.*日本)(?=.*(原生|家宽)).*"

  - name: TikTok-手动
    <<: *manual_template
    filter: "(.*(原生|家宽)).*"

  - name: CloudFlare
    <<: *autotest_template
    filter: "(?=.*(CF_)).*"

  # 其他组
  - name: 其他-故转
    <<: *fallback_template
    proxies:
      - 其他-智选
      - 其他-自手

  - name: 其他-自手
    <<: *fallback_template
    proxies:
      - 其他-自动
      - 其他-手动

  - name: 其他-智选
    <<: *smart_template
    filter: "^(?!.*(直连|拒绝|香港|台湾|日本|新加坡|韩国|美国|快冲|CF_)).*$"

  - name: 其他-自动
    <<: *autotest_template
    filter: "^(?!.*(直连|拒绝|香港|台湾|日本|新加坡|韩国|美国|快冲|CF_)).*$"

  - name: 其他-手动
    <<: *manual_template
    filter: "^(?!.*(直连|拒绝|香港|台湾|日本|新加坡|韩国|美国|CF_)).*$"

# ==============================================================
# 规则引擎（rules）和 规则集提供者（rule-providers）
# ==============================================================
rules:
  - RULE-SET,Twitter1_Domain,Twitter
  - RULE-SET,Twitter2_Domain,Twitter
  - RULE-SET,direct_Domain,不走代理
  - RULE-SET,mustJapan_Domain,必须日本
  - RULE-SET,mustHongKong_Domain,必须香港
  - RULE-SET,MyOwn_Gemini_Domain,Gemini
  - RULE-SET,Gemini_Domain,Gemini
  - RULE-SET,ai_Domain,AI
  - RULE-SET,MetaAi_Domain,AI
  - RULE-SET,ChatGPT_Domain,AI
  - RULE-SET,Perplexity_Domain,AI
  - RULE-SET,Nvidia_Domain,Nvidia
  - RULE-SET,GitHub1_Domain,GitHub
  - RULE-SET,GitHub2_Domain,GitHub
  - RULE-SET,TikTok_Domain,TikTok
  - RULE-SET,Telegram1_Domain,Telegram
  - RULE-SET,Telegram2_Domain,Telegram
  - RULE-SET,Social_Domain,Social
  - RULE-SET,Apple_Domain,Apple
  - RULE-SET,Microsoft_Domain,Microsoft
  - RULE-SET,Steam_Domain,Steam
  - RULE-SET,Epic_Domain,Game
  - RULE-SET,EA_Domain,Game
  - RULE-SET,Blizzard_Domain,Game
  - RULE-SET,UBI_Domain,Game
  - RULE-SET,Sony_Domain,Game
  - RULE-SET,Nintendo_Domain,Game
  - RULE-SET,YouTube1_Domain,YouTube
  - RULE-SET,YouTube2_Domain,YouTube
  - RULE-SET,YouTube3_Domain,YouTube
  - RULE-SET,Disney_Domain,Media
  - RULE-SET,Netflix_Domain,Media
  - RULE-SET,HBO_Domain,Media
  - RULE-SET,Spotify_Domain,Media
  - RULE-SET,checker_Domain,检测
  - RULE-SET,MyOwnIP_Domain,IP
  - RULE-SET,sourceIP_Domain,源IP
  - RULE-SET,MyOwnProxy_Domain,国外
  - RULE-SET,Whatsapp_Domain,国外
  - RULE-SET,Amazon_Domain,国外
  - RULE-SET,OKX_Domain,国外
  - RULE-SET,bybit_Domain,国外
  - RULE-SET,xnb_Domain,国外
  - RULE-SET,Proxy1_Domain,国外
  - RULE-SET,Global1_Domain,国外
  - RULE-SET,Google2_Domain,国外
  - RULE-SET,Google3_IP,国外
  - RULE-SET,flexible_Domain,灵活
  - RULE-SET,MyOwnDirect_Domain,国内
  - RULE-SET,Direct1_Domain,国内
  - RULE-SET,ChinaMax_Domain,国内
  - RULE-SET,China1_Domain,国内
  - RULE-SET,China2_Domain,国内
  - RULE-SET,China3_IP,国内
  - MATCH,其他

# ========================
# 规则集提供者
# ========================
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  Twitter1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.list"}
  Twitter2_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/x.mrs"}
  direct_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MyOwnDirect.list"}
  mustJapan_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MustJapan.list"}
  mustHongKong_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MustHongKong.list"}
  MyOwn_Gemini_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MyOwn_Gemini.list"}
  Gemini_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Gemini.list"}
  ai_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/AI.list"}
  MetaAi_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/MetaAi.list"}
  Perplexity_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Perplexity.list"}
  Nvidia_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Nvidia/Nvidia.list"}
  ChatGPT_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/openai.mrs"}
  GitHub1_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/github.mrs"}
  GitHub2_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/GitHub/GitHub.list"}
  TikTok_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/TikTok/TikTok.list"}
  Telegram1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.list"}
  Telegram2_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/telegram.mrs"}  
  Social_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Facebook/Facebook.list"}
  Apple_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple.list"}
  Microsoft_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.list"}
  Steam_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Steam/Steam.list"}
  Epic_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.list"}
  EA_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/EA/EA.list"}
  Blizzard_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list"}
  UBI_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/UBI/UBI.list"}
  Sony_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Sony/Sony.list"}
  Nintendo_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo.list"}
  YouTube1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/YouTube.list"}
  YouTube2_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.list"}
  YouTube3_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/youtube.mrs"}  
  Disney_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.list"}
  Netflix_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.list"}
  HBO_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/HBO/HBO.list"}
  Spotify_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.list"}
  checker_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Check.list"}
  MyOwnIP_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/IpCidr.list"}
  sourceIP_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/SrcIpCidr.list"}
  MyOwnProxy_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MyOwnProxy.list"}
  Whatsapp_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Whatsapp/Whatsapp.list"}
  Amazon_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Amazon/Amazon.list"}
  OKX_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/OKX/OKX.list"}
  bybit_Domain: {<<: *class, url: "https://raw.githubusercontent.com/v2fly/domain-list-community/refs/heads/master/data/bybit"}
  xnb_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/xnb.list"}
  Proxy1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Proxy.list"}
  Global1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global.list"}
  Google2_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/google.mrs"}  
  Google3_IP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/google.mrs"}
  flexible_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/Flexible.list"}
  MyOwnDirect_Domain: {<<: *class, url: "https://raw.githubusercontent.com/ShenGouQiang/General/refs/heads/main/clash/rule/list/MyOwnDirect.list"}
  Direct1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Direct.list"}
  ChinaMax_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/ChinaMax/ChinaMax.list"}
  China1_Domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/China/China.list"}
  China2_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/cn.mrs"}
  China3_IP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/cn.mrs"}